------------------------------------------------------------------------

---
title: "Metabolite enrichment"
author: "Vincent ROCHER & Juliette COOKE"
format: revealjs
editor: visual
---

```{r}
#| label: load-packages
#| include: false
#| echo: false
library(clusterProfiler)
library(tidyverse)
library(FELLA)
library("MetaboAnalystR")
```

# Overview

## Introduction

-   Pathway enrichment methods were originally developed for gene enrichment

-   Are also widely used with metabolites and metabolomics data (with caution!)

## Differences vs genes

-   Lower metabolome coverage vs genome coverage, less data in general

-   No Gene Ontology equivalent, ChEBI ontology & pathway sets are close =\> gaining functional information is more difficult and less standardised

-   Metabolite identifier mapping is a major issue: metabolites have multiple names, IDs, isomers

-   Bias depending on input data used, more so for metabolomics (some metabolites cannot be detected)

-   Depends on how pathways have been defined

## Methods

-   ORA: Over-representation analysis (Fisher's exact test)

-   MSEA: Metabolite set enrichment analysis, often referred to as GSEA even for metabolites = a Functional Class Scoring (FCS) method

-   Topology-based methods: uses networks of pathways in addition to other methods

## Tools and Databases

### Databases and IDs

-   KEGG, PubChem, ChEBI, MeSH, HMDB are databases which all have their own metabolite IDs, some with links to each other

-   Converting IDs: MetaboAnalyst can convert from names/IDs to many different IDs, KEGG API in R

### Tools

-   R: `clusterprofiler`, `FELLA`

-   In addition to R, Python can also be used for enrichment analyses: Python packages include `gseapy` with `gsea()` or `prerank()` functions

-   MetaboAnalyst: for online analyses

-   Metexplore for visualisation using metabolic networks

### Pathway sets

-   KEGG, Reactome, BioCyc, BiGG/MetabolicAtlas

-   Pathway definitions are relatively arbitrary and depend on the database

-   Filtering them may be necessary

# Enrichment methods

## Over-representation analysis (ORA)

-   Uses Fisher's exact test to test for overlap in sets

-   3 inputs:

    -   a collection of pathways

    -   a list of metabolites of interest (i.e. filtered on p-values)

    -   a background set:

        -   targeted metabolomics: all assayed metabolites

        -   untargeted metabolomics: all features that can be annotated

## ORA: extra info

-   Background set is very important! Use a specific background set: realistically observable, not all known metabolites

-   Multiple-testing corrections + filtering are necessary to produce list of metabolites of interest

## Metabolite set enrichment analysis (MSEA/GSEA)

-   Ranks all metabolite values and tests if closely ranked metabolites enrich the same pathway =\> can detect subtle and coordinated changes

-   Provides an Enrichment Score of each pathway which indicates up or down regulation

-   Doesn't require a threshold on metabolite values as it uses the entire list of metabolites of interest

-   Doesn't need a background set (background set = all input metabolites)

## GSEA: extra info

-   Provides a list of leading genes/metabolites which help enrich each pathway

-   "The leading-edge subset in a gene set are those genes that appear in the ranked list at or before the point at which the running sum reaches its maximum deviation from zero. The leading-edge subset can be interpreted as the core that accounts for the gene set's enrichment signal."

-   Still need to filter on p-value for significantly enriched pathways

-   Depending on input values/scores, interpretation of pathway regulations can be different!

-   GSEA is better for larger metabolic profiles with a variety of metabolites

## General warnings

-   Sensitive to metabolite misidentification

-   Use organism-specific pathway set if available

-   If possible, run multiple times with different pathway databases and form a consensus

# Enrichment tools

## Clusterprofiler

### Input data

```{r}
#cond = zscores %>% as.data.frame() %>% select(2)  %>% rownames_to_column("id")
#write.table(cond %>% rename("score" = 2), paste0("data/example_metab_data_",names(cond)[2],".tsv"), sep="\t", quote = F, row.names = F)
```

::: columns
::: {.column width="45%"}
Pathway sets

```{r}
pathway_sets = read.table("/home/juliette/these/data/simulated_PA/dict/metabolite_pathways.tsv", sep="\t", header = T) %>% 
  mutate(metabolite = str_remove(metabolite, "[a-z]$")) %>% relocate(subsystem)

metabolites = read.table("data/example_metab_data_Acylglycerides_metabolism.tsv", sep="\t", header = T) %>% arrange(desc(score)) %>% mutate(id = as.character(id)) %>% pull(score,id) %>% na.omit()

gsea.metab = GSEA(metabolites, TERM2GENE = pathway_sets,minGSSize = 3, pvalueCutoff = 1)
pathway_sets %>% slice(sample(1:n())) %>% head(15) %>% tibble()
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
Metabolomics data

```{r}
metabolites %>% enframe() %>% tibble() %>% head(15)
```
:::
:::

------------------------------------------------------------------------

### ORA

```{r}
metabolites.ORA = read.table("data/example_metab_data_Acylglycerides_metabolism.tsv", sep="\t", header = T) %>% na.omit() %>% filter(abs(score)> 1) %>% pull(id)

ora.metab = enricher(metabolites.ORA , TERM2GENE = pathway_sets )
dotplot(ora.metab)
```

------------------------------------------------------------------------

### GSEA/MSEA

#### GSEA example: results

```{r}
tibble((gsea.metab@result)) %>% filter(pvalue < 0.05) %>% select(ID, setSize, NES, pvalue, core_enrichment) %>% head(8)
```

#### GSEA example: plot

```{r}
enrichplot::gseaplot2(gsea.metab, geneSetID = 8, title = gsea.metab$Description[8])
```

```{r}
dotplot(gsea.metab)
```

## MetaboAnalyst

-   Word of warning: due to its online nature, reproducibility of results can be an issue

![](images/metaboanalyst.png){fig-align="center"}

-   Enrichment analysis = ORA

![](images/enrichment_analysis.png){fig-align="center" width="414"}

-   Pathway analysis = ORA + Pathway topology (PT)

```{r}
#ORA
metab_dict = read.table("data/metabolite_ids.tsv", sep = "\t", header = T, quote = "")
metab_dict$kegg[metab_dict$kegg == "nan"] = NA
metab_dict$chebi[metab_dict$chebi == "nan"] = NA
metabolites.ORA.names = read.table("data/test_metaboanalyst.csv", sep = "\t", header = F, quote = "") %>% pull(V1)
mSet=NULL
mSet = InitDataObjects(data.type = "list", anal.type = "msetora")
mSet = Setup.MapData(mSet, metabolites.ORA.names)

# Map metabolite names
mSet = CrossReferencing(mSet, q.type = "name", chebi = T)

mSet = SetMetabolomeFilter(mSet, TorF = F)
mSet = SetCurrentMsetLib(mSet,libname = "smpdb_pathway", 2)
mSet = CalculateHyperScore(mSet)
mSet = PlotORA(mSet, "ora_0_", "bar", "png", 72, width=NA)
```

```{r}
#QEA/GSEA?
mSet<-InitDataObjects("conc", "msetqea", FALSE)
mSet<-Read.TextData(mSet, "data/human_cachexia.csv", "rowu", "disc")
# Perform cross-referencing of compound names
mSet<-CrossReferencing(mSet, "name");
# Create mapping results table
mSet<-CreateMappingResultTable(mSet)
# Mandatory check of data
mSet<-SanityCheckData(mSet);
# Replace missing values with minimum concentration levels
mSet<-ReplaceMin(mSet);
# Perform no normalization
mSet<-PreparePrenormData(mSet)
mSet<-Normalization(mSet, "NULL", "NULL", "NULL", "PIF_178", ratio=FALSE, ratioNum=20)
# Plot normalization
mSet<-PlotNormSummary(mSet, "norm_0_", "png", 72, width=NA)
# Plot sample-wise normalization
mSet<-PlotSampleNormSummary(mSet, "snorm_0_", "png", 72, width=NA)
# Set the metabolome filter
mSet<-SetMetabolomeFilter(mSet, F);
# Set the metabolite set library to pathway
mSet<-SetCurrentMsetLib(mSet, "smpdb_pathway", 2);
# Calculate the global test score
mSet<-CalculateGlobalTestScore(mSet)
# Plot the QEA
mSet<-PlotQEA.Overview(mSet, "qea_0_", "bar", "png", 72, width=NA)
```

## FELLA

-   Uses KEGG network and a list of KEGG metabolites

-   Represents KEGG as a knowledge graph with hierarchical connections from metabolties to pathways through reactions, enzymes...

## FELLA: example

```{r}
data("FELLA.sample")
input.sample = read.table("data/epithelial_input.csv", sep= ",", header = T)
```

```{r}
#| eval: false
graph <- buildGraphFromKEGGREST(
 organism = "hsa",
 filter.path = c("01100", "01200", "01210", "01212", "01230"))

buildDataFromGraph(
 keggdata.graph = graph,
 databaseDir = "kegg_db/",
 internalDir = FALSE,
 matrices = "diffusion",
 normality = "diffusion",
 niter = 50)
```

```{r}
fella.data <- loadKEGGdata(
 databaseDir = "data/kegg_db",
 internalDir = FALSE,
 loadMatrix = NULL
 )
```

```{r}
myAnalysis = FELLA::enrich(compounds = input.sample%>% pull(KEGG.id), method = "diffusion", 
    approx = "normality",
    data = fella.data)
```

```{r}
g <- generateResultsGraph(object = myAnalysis, data = fella.data)
v.size <- c(
  "1" = 10,
  "2" = 6,
  "3" = 5,
  "4" = 4,
  "5" = 2
)
v.color <- stats::setNames(grDevices::palette()[1:5], 1:5)

```

```{r fig.width=6, fig.height=7}
#| fig-width: 17
#| fig-height: 10
plotGraph(g, 
     vertex.size = v.size[V(g)$com], 
     vertex.color = v.color[V(g)$com], 
     # only show level 1 (pathway) and 5 (compound)
     vertex.label = ifelse(V(g)$com %in% c(1, 5), V(g)$label, ""), 
     vertex.label.dist = 1, 
     vertex.label.color = ifelse(V(g)$name %in% input.sample, 
                                 "indianred1", "gray20"), 
     edge.width = 3,
     nlimit = 150)
```

## Metexplore

### Biosources/metabolic networks

KEGG - E. coli

![](images/metabolic_network.png){fig-align="center"}

------------------------------------------------------------------------

![](images/biosource_stats.png){fig-align="center"}

------------------------------------------------------------------------

### ID mapping

-   Usually from "common names" to CHEBI

-   Most often requires a manual step for missing ID conversions

-   Can add a background set of metabolites for ORA

------------------------------------------------------------------------

### Pathway analysis

-   Once a metabolite dataset has been mapped to a network, pathway analysis (ORA) is done automatically using the mapped data

-   Can be viewed in a table with multiple test corrections

------------------------------------------------------------------------

### Visualisation

-   Can visualise a subset of metabolites and reactions, or entire pathways

-   Highlight metabolites of interest

# Conclusion

## References

-   Wieder C, Frainay C, Poupin N, Rodríguez-Mier P, Vinson F, Cooke J, et al. (2021) **Pathway analysis in metabolomics: Recommendations for the use of over-representation analysis.** PLoS Comput Biol 17(9): e1009105. https://doi.org/10.1371/journal.pcbi.1009105
-   [GSEA leading edge analysis](https://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideTEXT.htm#_Running_a_Leading_Edge%20Analysis)
